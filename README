Download
--------

[dl]: git://github.com/mcr/can-o-pg.git 


Introduction
------------

Can-o-PG started as a small set of scripts that configures a LAPP system
in the current directory.  (Linux Apache Postgresql PHP)

This branch is now a Rails Vendor plugin.  

I really dislike web projects that tell me to go reconfigure the running
Postgresql daemon (and then give me no examples), and assume that I want to run
everything, even during testing, as a system process.

What I want is to turn web "applications" into normal source trees.
This means that they run without root, they run in the current directory,
and they do not require reconfiguring system daemons.

PostgresQL very easily will run with a custom Unix domain port, and
Apache will run unpriviledged on a custom port, it's just a question of
plugging it all together.

To use this version, you include it as a rails plugin.  You can do this 
either with:
        script/plugin install git://github.com/mcr/can-o-pg.git 

I prefer to use git, and so I use git submodules:
        git submodule add git://github.com/mcr/can-o-pg.git vendor/plugins/can-o-pg

Either way, then do, once:
        make -f vendor/plugins/can-o-pg/Makefile install

I suggest you commit the symlink that results, as git submodules does not
do it for you.   A future version may be pure ruby Rakefile, and no shell
scripts, but at this point the shell scripts are shared with django and
PHP/LAPP applications as well.

Then setup your "public" directory to point to the root of your HTML/PHP
code.   For Rails projects, this is naturally where it is.   (You will see
that there are rails cluster code visible in the apache.conf)

There are several ways to do this, if you are working with a stock PHP/Apache
project (like racktables, ledgersmb, etc..):

1) a straight symlink pointing to another directory.
2) copy the code to public
3) git submodule add, to get your data there    (common with django code)
4) start new project in this format.

If you go the (3) route, you should, after you create the .gitsubmodule
and tests, and other directories you need for your testing skaffold,
then create a new project for your foo project, "foo-skaffold".
Updates from can-o-mysql can be applied with a git merge or git rebase.

CONFIGURATION
=============

run "make showconfig" to see what the settings are, you should see something
like: 
        POSTBIN /usr/lib/postgresql/8.3/bin
        APPNAME chapter13
        DBPATH: /corp/projects/credil/nv/chapter13/run
        DBPASSWORD: baesheDaic5OhGh2
        SCRIPTDIR: vendor/plugins/can-o-pg
        TOP: /corp/projects/credil/nv/chapter13
        APACHE2_MODDIR: /usr/lib/apache2/modules
        WEBSERVER: /usr/sbin/apache2
        MIMETYPES: /etc/mime.types
        PHP5_MODDIR:/usr/lib/apache2/modules

If you need to override any of these values, you can use the file 
"can-o-pg.settings" at the top level.  It is a makefile format file that will
be included if it exists.


APACHE
======

If you need Apache (and you do if you are doing PHP5 work), then just run
"make apache" and and apache configuration will be created in run, and a copy
of Apache will be started.   It will be started on a port number equal to 8000
plus your uid.  This choice is stable per user, but permits multiple users 
to work on a multiuser machine (this is common if you have windows programmers 
using putty to a linux machine).

New Projects
============

On a new project, I suggest that you organize things the way that Rails does.
Your code does not go into public, only your visible .html and .phtml files
do.  All of your classes and the like go into the top-level php directory.

If you need mocks or other code just for tests, then put them into test/php,
which is on the php include path prior to php.

PHPPGADMIN
==========

No doubt you will need to grovel the database by hand at times.
phppgadmin is a very good tool. If you have a copy in /usr/share/phppgadmin,
it will be linked into the apache config at /phppgadmin.  It is connected
to the database by Unix domain socket.  You can use the identities created
by the bootstrap.sql, such as application_development.


USING IT
========

You will find a Makefile at the top-level.  I'd rather it was a Rakefile,
but I use this code with multiple other things which are not rails. 
(There is a branch of the code that supports Django, btw)

You'll want to edit vendor/plugins/can-o-pg/bootstrap.sql.in eventually,
and I ought to include another file as well.
For rails projects, you can just use migrations to populate the database, but
other systems you'll want to include whatever schema creation code.  Also
note the passwords which  are in that file, they go into your
config/database.yml or equivalent. 

Open up the can-o-pg.settings, and change APPNAME= if the name of the current
directory is wrong.  

But, for now, just do:
        make
        cp vendor/plugins/can-o-pg/database.yml config/database.yml

("make server" will do this for you)

EXTRAS
======
make psql                - starts psql in the current database context.
make INPUTFILE=foo load  - starts psql with "foo" on command line 
                           populate the database.
make apache
make apachestop         - stop apache
make stop               - shutdown database
make showconfig         - show settings
