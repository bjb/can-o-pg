Download
--------

[dl]: git://github.com/mcr/can-o-pg.git 


Introduction
------------

Can-o-PQ is a small set of scripts that configures a LAPP system
in the current directly.  (Linux Apache Postgresql PHP)

This is the last version that is to be merged.  Future versions are
on the branch "plugin" and are designed to be used a a vendor plugin.

I really dislike web projects that tell me to go reconfigure the running
Postgresql daemon (and then give me no examples), and assume that I want to run
everything, even during testing, as a system process.

What I want is to turn web "applications" into normal source trees.
This means that they run without root, they run in the current directory,
and they do not require reconfiguring system daemons.

Postgresql very easily will run with a custom Unix domain port, and
Apache will run unpriviledged on a custom port, it's just a question of
plugging it all together.

To start with this, create a new empty project.  I suggest that you
fork my can-o-mysql project on github, and then check it out.  If you are
including this into an existing project, set up the repo as a an additional
remote:
        git remote add canopg git@github.com:mcr/can-o-pg.git

and then merge it in:
        git merge canopg/master

You likely want to delete this file from your project, or not, as you see fit. 

Then setup your "public" directory to point to the root of your HTML/PHP
code.   For Rails projects, this is naturally where it is.   (You will see
that there are rails cluster code visible in the apache.conf)

There are several ways to do this, if you are working with a stock PHP/Apache
project (like racktables, ledgersmb, etc..):

1) a straight symlink pointing to another directory.
2) copy the code to public
3) git submodule add, to get your data there
4) start new project in this format.

If you go the (3) route, you should, after you create the .gitsubmodule
and tests, and other directories you need for your testing skaffold,
then create a new project for your foo project, "foo-skaffold".
Updates from can-o-mysql can be applied with a git merge or git rebase.

New Projects
============

On a new project, I suggest that you organize things the way that Rails does.
Your code does not go into public, only your visible .html and .phtml files
do.  All of your classes and the like go into the top-level php directory.

If you need mocks or other code just for tests, then put them into test/php,
which is on the php include path prior to php.


USING IT
========

You will find a Makefile at the top-level.  I'd rather it was a Rakefile,
but I use this code with multiple other things which are not rails. 
(There is a branch of the code that supports Django, btw)

You'll want to edit etc/botostrap.sql eventually.  For rails projects,
you can just use migrations to populate the database, but other systems you'll
want to include whatever schema creation code.  Also note the passwords which
are in that file, they go into your config/database.yml or equivalent.

Open up the Makefile, and change APPNAME= if the name of the current directory
is wrong.  

But, for now, just do:
        make
        cp etc/database.yml config/database.yml

A proper config/database.yml in etc/database.yml created.  You may want to
enable the line in the Makefile which copies it over.

EXTRAS
======
make psql                - starts psql in the current database context.
make INPUTFILE=foo load  - starts psql with "foo" on command line 
                           populate the database.